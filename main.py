from flask import Flask
from threading import Thread
import os
import datetime
from telegram import Update, ChatPermissions
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import asyncio

# ==================== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø UPTIMEROBOT ====================
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ Telegram Admin Bot is Alive! | Blockes444 System"

def run_web():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_web)
    t.start()

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
keep_alive()

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ====================
user_data_file = "user_data.json"

# –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º—É—Ç–æ–≤
MUTE_LEVELS = [1, 5, 10, 30, 60]  # –º–∏–Ω—É—Ç—ã
RESET_TIME = 3 * 60 * 60  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ====================
def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(user_data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(user_data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_next_mute_duration(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    user_data = load_user_data()
    user_id_str = str(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ
    if user_id_str not in user_data:
        user_data[user_id_str] = {
            'mute_level': 0,
            'last_mute_time': None,
            'total_mutes': 0,
            'first_mute_time': None
        }
    
    user = user_data[user_id_str]
    current_time = datetime.datetime.now().timestamp()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å–µ—Ç –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    if user['last_mute_time'] and (current_time - user['last_mute_time']) > RESET_TIME:
        user['mute_level'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        user['total_mutes'] = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    current_level = user['mute_level']
    if current_level >= len(MUTE_LEVELS):
        current_level = len(MUTE_LEVELS) - 1  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    
    mute_duration = MUTE_LEVELS[current_level]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    user['mute_level'] = current_level + 1
    user['last_mute_time'] = current_time
    user['total_mutes'] += 1
    
    if not user['first_mute_time']:
        user['first_mute_time'] = current_time
    
    save_user_data(user_data)
    return mute_duration, current_level + 1

def reset_user_mute_level(user_id):
    """–°–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    user_id_str = str(user_id)
    
    if user_id_str in user_data:
        user_data[user_id_str]['mute_level'] = 0
        user_data[user_id_str]['total_mutes'] = 0
        save_user_data(user_data)
        return True
    return False

def get_user_mute_info(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    user_id_str = str(user_id)
    
    if user_id_str not in user_data:
        return {
            'level': 0,
            'total_mutes': 0,
            'last_mute': None,
            'first_mute': None,
            'next_mute': MUTE_LEVELS[0]
        }
    
    user = user_data[user_id_str]
    current_level = user['mute_level']
    next_mute = MUTE_LEVELS[current_level] if current_level < len(MUTE_LEVELS) else 60
    
    return {
        'level': current_level,
        'total_mutes': user['total_mutes'],
        'last_mute': user['last_mute_time'],
        'first_mute': user['first_mute_time'],
        'next_mute': next_mute
    }

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        user = update.effective_user
        chat = update.effective_chat
        
        if chat.type == 'private':
            return True  # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            
        admins = await context.bot.get_chat_administrators(chat.id)
        admin_ids = [admin.user.id for admin in admins]
        
        return user.id in admin_ids
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∫–∏: {e}")
        return False

async def get_target_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message.reply_to_message:
            return update.message.reply_to_message.from_user
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
        if context.args:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ username
            # –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
            
        return update.effective_user
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def format_time(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    if not timestamp:
        return "–Ω–∏–∫–æ–≥–¥–∞"
    return datetime.datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y %H:%M")

# ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ <b>Blockes444 Admin Bot</b>
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏

‚ö° <b>–°–∏—Å—Ç–µ–º–∞ –º—É—Ç–æ–≤:</b>
1Ô∏è‚É£ 1-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: <b>1 –º–∏–Ω—É—Ç–∞</b>
2Ô∏è‚É£ 2-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: <b>5 –º–∏–Ω—É—Ç</b>  
3Ô∏è‚É£ 3-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: <b>10 –º–∏–Ω—É—Ç</b>
4Ô∏è‚É£ 4-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: <b>30 –º–∏–Ω—É—Ç</b>
5Ô∏è‚É£ 5-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: <b>60 –º–∏–Ω—É—Ç</b>

üîÑ <b>–ê–≤—Ç–æ-—Ä–µ—Å–µ—Ç:</b> –∫–∞–∂–¥—ã–µ <b>3 —á–∞—Å–∞</b>

üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    """
    
    await update.message.reply_text(welcome_text, parse_mode='HTML')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üõ†Ô∏è <b>–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê</b>

üëÆ‚Äç‚ôÇÔ∏è <b>–î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í:</b>
/mute - –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º—É—Ç (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/unmute - —Ä–∞–∑–º—É—Ç–∏—Ç—å (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)  
/ban - –∑–∞–±–∞–Ω–∏—Ç—å (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/warn - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
/reset_mute - —Å–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –º—É—Ç–∞
/clear_mutes - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üìä <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/my_mute - –º–æ–π —É—Ä–æ–≤–µ–Ω—å –º—É—Ç–∞
/mute_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

‚öôÔ∏è <b>–°–ò–°–¢–ï–ú–ê –ú–£–¢–û–í:</b>
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: 1–º ‚Üí 5–º ‚Üí 10–º ‚Üí 30–º ‚Üí 60–º
‚Ä¢ –ê–≤—Ç–æ-—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
    """
    
    await update.message.reply_text(help_text, parse_mode='HTML')

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    user_data = load_user_data()
    total_users = len(user_data)
    total_mutes = sum(user['total_mutes'] for user in user_data.values())
    
    status_text = f"""
üìä <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}
üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:</b> {total_users}
üîá <b>–í—Å–µ–≥–æ –º—É—Ç–æ–≤ –≤—ã–¥–∞–Ω–æ:</b> {total_mutes}
‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ

‚ö° <b>–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>
üîÑ –ê–≤—Ç–æ-—Ä–µ—Å–µ—Ç: –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
üìà –£—Ä–æ–≤–Ω–∏: 1–º ‚Üí 5–º ‚Üí 10–º ‚Üí 30–º ‚Üí 60–º

ü§ñ <b>Blockes444 System</b>
    """
    
    await update.message.reply_text(status_text, parse_mode='HTML')

# ==================== –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò ====================
async def mute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mute"""
    if not await is_admin(update, context):
        await update.message.reply_text("‚ùå <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!</b>", parse_mode='HTML')
        return
    
    target_user = await get_target_user(update, context)
    if not target_user:
        await update.message.reply_text(
            "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /mute –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
            parse_mode='HTML'
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        reason = " ".join(context.args) if context.args else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        mute_duration, mute_level = get_next_mute_duration(target_user.id)
        mute_info = get_user_mute_info(target_user.id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É—Ç
        until_date = datetime.datetime.now() + datetime.timedelta(minutes=mute_duration)
        chat_permissions = ChatPermissions(
            can_send_messages=False,
            can_send_media_messages=False,
            can_send_polls=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False
        )
        
        await context.bot.restrict_chat_member(
            chat_id=update.effective_chat.id,
            user_id=target_user.id,
            permissions=chat_permissions,
            until_date=until_date
        )
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –º—É—Ç–µ
        mute_message = await update.message.reply_text(
            f"üîá <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –º—É—Ç!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.mention_html()}\n"
            f"‚è∞ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {mute_duration} –º–∏–Ω—É—Ç\n"
            f"üìà <b>–£—Ä–æ–≤–µ–Ω—å –º—É—Ç–∞:</b> {mute_level}/5\n"
            f"üî¢ <b>–í—Å–µ–≥–æ –º—É—Ç–æ–≤:</b> {mute_info['total_mutes']}\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
            f"üîÑ <b>–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:</b> {mute_info['next_mute']} –º–∏–Ω—É—Ç",
            parse_mode='HTML'
        )
        
        # –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(15)
        await mute_message.delete()
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}", parse_mode='HTML')

async def unmute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /unmute"""
    if not await is_admin(update, context):
        await update.message.reply_text("‚ùå <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!</b>", parse_mode='HTML')
        return
    
    target_user = await get_target_user(update, context)
    if not target_user:
        await update.message.reply_text(
            "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /unmute –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
            parse_mode='HTML'
        )
        return
    
    try:
        # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        chat_permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_change_info=True,
            can_invite_users=True,
            can_pin_messages=True
        )
        
        await context.bot.restrict_chat_member(
            chat_id=update.effective_chat.id,
            user_id=target_user.id,
            permissions=chat_permissions
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –º—É—Ç–∞
        reset_user_mute_level(target_user.id)
        
        message = await update.message.reply_text(
            f"üîä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω!</b>\n"
            f"üë§ {target_user.mention_html()}\n"
            f"üîÑ –£—Ä–æ–≤–µ–Ω—å –º—É—Ç–∞ —Å–±—Ä–æ—à–µ–Ω",
            parse_mode='HTML'
        )
        
        await asyncio.sleep(10)
        await message.delete()
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}", parse_mode='HTML')

async def warn_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /warn"""
    if not await is_admin(update, context):
        await update.message.reply_text("‚ùå <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!</b>", parse_mode='HTML')
        return
    
    target_user = await get_target_user(update, context)
    if not target_user:
        await update.message.reply_text(
            "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /warn –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
            parse_mode='HTML'
        )
        return
    
    reason = " ".join(context.args) if context.args else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
    
    warn_message = await update.message.reply_text(
        f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ!</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.mention_html()}\n"
        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
        f"üí° <b>–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ</b> –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –º—É—Ç—É",
        parse_mode='HTML'
    )
    
    await asyncio.sleep(10)
    await warn_message.delete()

async def reset_mute_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reset_mute"""
    if not await is_admin(update, context):
        await update.message.reply_text("‚ùå <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!</b>", parse_mode='HTML')
        return
    
    target_user = await get_target_user(update, context)
    if not target_user:
        await update.message.reply_text(
            "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /reset_mute –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
            parse_mode='HTML'
        )
        return
    
    if reset_user_mute_level(target_user.id):
        message = await update.message.reply_text(
            f"üîÑ <b>–£—Ä–æ–≤–µ–Ω—å –º—É—Ç–∞ —Å–±—Ä–æ—à–µ–Ω!</b>\n"
            f"üë§ {target_user.mention_html()}\n"
            f"üìä –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–π –º—É—Ç: 1 –º–∏–Ω—É—Ç–∞",
            parse_mode='HTML'
        )
    else:
        message = await update.message.reply_text(
            f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!</b>\n"
            f"üë§ {target_user.mention_html()}",
            parse_mode='HTML'
        )
    
    await asyncio.sleep(10)
    await message.delete()

# ==================== –ö–û–ú–ê–ù–î–´ –ò–ù–§–û–†–ú–ê–¶–ò–ò ====================
async def my_mute_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /my_mute"""
    user = update.effective_user
    mute_info = get_user_mute_info(user.id)
    
    level_text = f"""
üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–£–¢–û–í</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.mention_html()}
üìà <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {mute_info['level']}/5
üî¢ <b>–í—Å–µ–≥–æ –º—É—Ç–æ–≤:</b> {mute_info['total_mutes']}
‚è∞ <b>–°–ª–µ–¥—É—é—â–∏–π –º—É—Ç:</b> {mute_info['next_mute']} –º–∏–Ω—É—Ç

üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –º—É—Ç:</b> {format_time(mute_info['last_mute'])}
üìÖ <b>–ü–µ—Ä–≤—ã–π –º—É—Ç:</b> {format_time(mute_info['first_mute'])}

üîÑ <b>–°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è</b> –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    """
    
    await update.message.reply_text(level_text, parse_mode='HTML')

async def mute_info_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mute_info"""
    target_user = await get_target_user(update, context)
    if not target_user:
        target_user = update.effective_user
    
    mute_info = get_user_mute_info(target_user.id)
    
    level_text = f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–£–¢–û–í</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.mention_html()}
üìà <b>–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {mute_info['level']}/5
üî¢ <b>–í—Å–µ–≥–æ –º—É—Ç–æ–≤:</b> {mute_info['total_mutes']}
‚è∞ <b>–°–ª–µ–¥—É—é—â–∏–π –º—É—Ç:</b> {mute_info['next_mute']} –º–∏–Ω—É—Ç

üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –º—É—Ç:</b> {format_time(mute_info['last_mute'])}
üìÖ <b>–ü–µ—Ä–≤—ã–π –º—É—Ç:</b> {format_time(mute_info['first_mute'])}

üîÑ <b>–°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è</b> –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    """
    
    await update.message.reply_text(level_text, parse_mode='HTML')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    user_data = load_user_data()
    
    total_users = len(user_data)
    total_mutes = sum(user['total_mutes'] for user in user_data.values())
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º—É—Ç–æ–≤
    top_muted = sorted(
        [(user_id, data['total_mutes']) for user_id, data in user_data.items()],
        key=lambda x: x[1],
        reverse=True
    )[:5]
    
    stats_text = f"""
üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê</b>

üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}
üîá <b>–í—Å–µ–≥–æ –º—É—Ç–æ–≤ –≤—ã–¥–∞–Ω–æ:</b> {total_mutes}

üèÜ <b>–¢–æ–ø –ø–æ –º—É—Ç–∞–º:</b>
"""
    
    for i, (user_id, mutes) in enumerate(top_muted, 1):
        stats_text += f"{i}. ID {user_id}: {mutes} –º—É—Ç–æ–≤\n"
    
    stats_text += f"\nü§ñ <b>Blockes444 System</b>"
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

async def clear_mutes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /clear_mutes"""
    if not await is_admin(update, context):
        await update.message.reply_text("‚ùå <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!</b>", parse_mode='HTML')
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_user_data({})
    
    message = await update.message.reply_text(
        "üóëÔ∏è <b>–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—É—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞!</b>\n"
        "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞",
        parse_mode='HTML'
    )
    
    await asyncio.sleep(10)
    await message.delete()

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ Secrets")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Admin Bot...")
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    commands = [
        ('start', start),
        ('help', help_command),
        ('status', status),
        ('mute', mute_user),
        ('unmute', unmute_user),
        ('warn', warn_user),
        ('reset_mute', reset_mute_level),
        ('my_mute', my_mute_info),
        ('mute_info', mute_info_user),
        ('stats', stats_command),
        ('clear_mutes', clear_mutes),
    ]
    
    for command, handler in commands:
        application.add_handler(CommandHandler(command, handler))
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    main()